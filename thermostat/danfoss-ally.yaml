blueprint:
  name: Danfoss Ally Controller
  description: Dynamically updates the radiator based on temperature changes or time triggers.
  domain: automation
  input:
    radiator_climate_entity:
      name: Radiator Climate Entity
      selector:
        entity:
          domain: climate
    temperature_sensor_entity:
      name: Temperature Sensor Entity
      selector:
        entity:
          domain: sensor
          device_class: temperature
    earliest_update_time:
      name: Earliest Next Update Time
      selector:
        entity:
          domain: input_datetime
    window_sensor_entity:
      name: Window Sensor Entity (optional)
      default:
      selector:
        entity:
          domain: binary_sensor
          device_class: window

trigger_variables:
  window_sensor_entity: !input "window_sensor_entity"

trigger:
  - platform: state
    entity_id: !input "temperature_sensor_entity"
    id: temperature
  - platform: template
    value_template: '{{ is_state(window_sensor_entity, "on") }}'
    id: window_open
  - platform: template
    value_template: '{{ is_state(window_sensor_entity, "off") }}'
    id: window_closed
  - platform: time
    at: !input "earliest_update_time"
    id: time
  - platform: time_pattern
    minutes: /30
    id: backup

variables:
  radiator_climate_entity: !input "radiator_climate_entity"
  temperature_sensor_entity: !input "temperature_sensor_entity"
  window_sensor_entity: !input "window_sensor_entity"
  earliest_update_time: !input "earliest_update_time"
  external_measured_room_sensor: "{{ 'number.' + radiator_climate_entity.split('.')[1] + '_external_measured_room_sensor' }}"
  window_open_external: "{{ 'switch.' + radiator_climate_entity.split('.')[1] + '_window_open_external' }}"

condition:
  - condition: or
    enabled: false
    conditions:
      - condition: trigger
        id:
          - time
      - condition: template
        value_template: >-
          {{ (states(external_measured_room_sensor) | int
          - (states(temperature_sensor_entity) | float * 100) |
          round) | abs >= 10 }}
      - condition: template
        value_template: >-
          {{ now() > states(earliest_update_time) | as_datetime | as_local }}

action:
  - if:
      - condition: or
        conditions:
          - alias: If temperature has changed at least 0.1K
            condition: template
            value_template: >-
              {{ (states(external_measured_room_sensor) | int
              - (states(temperature_sensor_entity) | float * 100) |
              round) | abs >= 10 }}
          - alias: If we've not updated within the last 30 minutes
            condition: template
            value_template: >-
              {{ now() > states(earliest_update_time) | as_datetime | as_local }}
    then:
      - service: mqtt.publish
        data:
          qos: 0
          retain: false
          payload: >-
            {"external_measured_room_sensor": {{
            (states(temperature_sensor_entity) | float * 100) | round }}}
          topic: >-
            zigbee2mqtt/{{ state_attr(radiator_climate_entity, 'friendly_name')
            }}/set
      - service: input_datetime.set_datetime
        target:
          entity_id: !input "earliest_update_time"
        data:
          datetime: "{{ (now() + timedelta(minutes=30)).strftime('%Y-%m-%d %H:%M:%S') }}"
  - if:
      - alias: If window sensor were given
        condition: template
        value_template: "{{ window_sensor_entity|length > 0 }}"
    then:
      if:
        - alias: Update window open status
          condition: template
          value_template: "{{ states(window_sensor_entity) != states(window_open_external) }}"
      then:
        - service: mqtt.publish
          data:
            qos: 0
            retain: false
            payload: >-
              {"window_open_external": {{ 'true' if states(window_sensor_entity) == "on" else 'false' }}}
            topic: >-
              zigbee2mqtt/{{ state_attr(radiator_climate_entity, 'friendly_name') }}/set
mode: single